package main

func findKthLargest(nums []int, k int) int {
	return quickSelect(nums, 0, len(nums)-1, len(nums)-k)
}

func quickSelect(nums []int, left, right, k int) int {
	if left == right {
		return nums[left]
	}

	pivotIndex := partition(nums, left, right)

	if pivotIndex == k {
		return nums[pivotIndex]
	} else if pivotIndex > k {
		return quickSelect(nums, left, pivotIndex-1, k)
	} else {
		return quickSelect(nums, pivotIndex+1, right, k)
	}
}

func partition(nums []int, left, right int) int {
	pivotValue := nums[right]
	storeIndex := left

	for i := left; i < right; i++ {
		if nums[i] < pivotValue {
			nums[i], nums[storeIndex] = nums[storeIndex], nums[i]
			storeIndex++
		}
	}

	nums[storeIndex], nums[right] = nums[right], nums[storeIndex]
	return storeIndex
}

// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
// Quickselect –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π", —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—ä—ë–º —Ä–∞–±–æ—Ç—ã:

// –í—ã–±—Ä–∞—Ç—å –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (pivot):

// –û–±—ã—á–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// –†–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤:

// –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤–ª–µ–≤–æ, –∞ –±–æ–ª—å—à–µ ‚Äî –≤–ø—Ä–∞–≤–æ.
// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (pivotIndex):

// –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –º–∞—Å—Å–∏–≤ –±—ã–ª –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä:

// –ï—Å–ª–∏ –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
// ùëò
// k, –º—ã –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// –ï—Å–ª–∏
// ùëò<pivotIndex
// k<pivotIndex, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞.
// –ï—Å–ª–∏
// ùëò>pivotIndex
// k>pivotIndex, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞.
