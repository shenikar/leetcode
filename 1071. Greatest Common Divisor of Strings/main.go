package main

import (

)
func gcdOfStrings(str1 string, str2 string) string {
	if str1+str2 != str2+str1 {
		return ""
	}
	return str1[:gcd(len(str1), len(str2))]
}

func gcd(a, b int) int {
	if b == 0 {
		return a
	}
	return gcd(b, a%b)
}

// Постановка задачи
// Даны две строки str1 и str2. Нужно найти строку, которая:

// Является наибольшей общей подстрокой для str1 и str2.
// Может многократно повторяться, чтобы получить как str1, так и str2.
// Алгоритм решения
// Проверка повторяемости строк:

// if str1 + str2 != str2 + str1 {
//     return ""
// }
// Если str1 + str2 не равно str2 + str1, это означает, что строки не могут быть результатом повторения одной и той же подстроки. Например:
// Для str1 = "ABCABC" и str2 = "ABC":
// str1 + str2 = "ABCABCABC" и str2 + str1 = "ABCABCABC" — строки совпадают.
// Для str1 = "ABAB" и str2 = "ABBA":
// str1 + str2 = "ABABABBA" и str2 + str1 = "ABBAABAB" — строки не совпадают.
// В этом случае общий делитель отсутствует, и функция возвращает "".
// Вычисление длины наибольшего общего делителя строк:

// return str1[:gcd(len(str1), len(str2))]
// Если строки являются результатом повторения одной и той же подстроки, длина этой подстроки равна наибольшему общему делителю (НОД) длин строк.
// Например, если:
// len(str1) = 6 и len(str2) = 3, то gcd(6, 3) = 3.
// Возвращаем первые 3 символа из str1 (или str2), так как они идентичны.
// Функция для вычисления НОД:

// func gcd(a, b int) int {
//     if b == 0 {
//         return a
//     }
//     return gcd(b, a%b)
// }
// Используется алгоритм Евклида для нахождения НОД двух чисел. Он работает следующим образом:
// Если b = 0, то a — НОД.
// Иначе рекурсивно вызываем gcd(b, a % b).