package main

import (

)

func reverseVowels(s string) string {
	bytes := []byte(s)
	l, r := 0, len(s)-1
	for l < r {
		for l < r && !isVowel(bytes[l]) {
			l++
		}
		for l < r && !isVowel(bytes[r]) {
			r--
		}
		bytes[l], bytes[r] = bytes[r], bytes[l]
		l++
		r--
	}
	return string(bytes)
}

func isVowel(c byte) bool {
	switch c {
	case 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U':
		return true
	}
	return false
}

// Алгоритм решения задачи
// Идентификация гласных:

// Гласные символы определяются как 'a', 'e', 'i', 'o', 'u' (и их заглавные эквиваленты).
// Чтобы легко проверять, является ли символ гласным, создаем функцию isVowel(c byte).
// Использование двух указателей:

// Применяем два указателя l и r, которые будут двигаться навстречу друг другу:
// l — начинает с начала строки.
// r — начинает с конца строки.
// Цель указателей — найти гласные символы, которые нужно поменять местами.
// Пошаговое движение указателей:

// Пока l < r:
// Двигаем l вправо до первого гласного.
// Двигаем r влево до первого гласного.
// Меняем местами символы, на которые указывают l и r.
// Сохранение регистра:

// Символы переставляются "как есть", то есть сохраняется их исходный регистр.
// Возврат результата:

// Преобразуем измененный массив символов обратно в строку и возвращаем.